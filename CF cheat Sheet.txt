1.removes consecutive dupliactes from array

vector<int>v;
 v.resize(distance(v.begin(), unique(v.begin(), v.end())));

2.2d vector with user defined size(n*m)
    vector<vector<int>> dp(n + 1, vector<int>(m + 1));

3.It uses a builtin function of the GCC compiler to calculate the position from the right of the first non-zero (1) bit in the binary representation of k.
__builtin_ffsll(n); 

4.integer into char
char('0' + d)

5.Prime factor,Prime
vector<bool> ip;
vi p, spf;
/* p-prime list
spf-smallest prime factor
ip-tells if a number is prime
*/

void seive(int n)
{
    ip.assign(n + 1, 1);
    spf.assign(n + 1, 0);
    ip[0] = ip[1] = 0;
    p.clear();
    for (int i = 2; i <= n; i++)
    {
        if (ip[i])
        {
            spf[i] = i;
            p.pb(i);
            for (int j = i * i; j <= n; j += i)
            {
                if (ip[j])
                {
                    ip[j] = 0;
                    spf[j] = i;
                }
            }
        }
    }
}


6.a power p mod 
int pw(int a,int p,int MOD=mod){
	int result = 1;
	while (p > 0) {
		if (p & 1)
			result = a * result % MOD;
		a = a * a % MOD;
		p >>= 1;
	}
	return result;
}

8.nCr 
Precompute factorials to answer quesries in log(n)
unsigned long long power(unsigned long long x,
                                  int y, int p)
{
    unsigned long long res = 1; // Initialize result
 
    x = x % p; // Update x if it is more than or
    // equal to p
 
    while (y > 0)
    {
     
        // If y is odd, multiply x with result
        if (y & 1)
            res = (res * x) % p;
 
        // y must be even now
        y = y >> 1; // y = y/2
        x = (x * x) % p;
    }
    return res;
}
 
// Returns n^(-1) mod p
unsigned long long modInverse(unsigned long long n, 
                                            int p)
{
    return power(n, p - 2, p);
}
 
// Returns nCr % p using Fermat's little
// theorem.
unsigned long long nCr(unsigned long long n,
                                 int r, int p=mod)
{
    // If n<r, then nCr should return 0
    if (n < r)
        return 0;
    // Base case
    if (r == 0)
        return 1;
 
    // Fill factorial array so that we
    // can find all factorial of r, n
    // and n-r
    unsigned long long fac[n + 1];
    fac[0] = 1;
    for (int i = 1; i <= n; i++)
        fac[i] = (fac[i - 1] * i) % p;
 
    return (fac[n] * modInverse(fac[r], p) % p
            * modInverse(fac[n - r], p) % p)
           % p;
}


